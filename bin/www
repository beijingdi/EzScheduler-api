#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
var cors = require('cors');
var whitelist = ['www.ezscheduler.ca','http://localhost:3000'];
var corsOptionsDelegate = function (req, callback) {   
  var corsOptions; 
  console.log(req.header('Origin')); 
  if (whitelist.indexOf(req.header('Origin')) !== -1) {    
     console.log('whitelisted!!');
     corsOptions = { origin: true, credentials: true } // reflect (enable) the requested origin in the CORS response  
     } 
  else { 
    console.log("not whitelisted!");
    corsOptions = { origin: false } // disable CORS for this request  
   }   
  callback(null, corsOptions) // callback expects two parameters: error and options 
}; 
app.use(cors(corsOptionsDelegate));

/**
 * Get port from environment and store in Express.
 */
require("dotenv").config();
var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log("app is listeninggggggggggggggggggggggg");
}


